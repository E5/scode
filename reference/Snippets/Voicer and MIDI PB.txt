/*
On May 26, 2008, at 1:38 PM, Dan Stowell wrote:
BTW is there a way to get a Voicer to respond to pitch bends? I might
just not have spotted it.

The first example in VoicerMIDISocket help illustrates it.
*/

// First, the synthdef has to have an argument for pitch bend, given as a ratio where 1 is normal pitch, 0.5 is an octave lower etc.

i = Instr([\test, \miditest], {
	arg freq = 440, gate = 0, env, pb = 1, ffreq = 1000, rq = 1;
	var out, amp;
	amp = Latch.kr(gate, gate);	// velocity sensitivity
	out = EnvGen.kr(env, gate, doneAction:2) *
		RLPF.ar(Pulse.ar(freq * pb, 0.25, amp), ffreq, rq);
	[out,out]
}, [\freq, \amp, nil, nil, \freq, \rq]);

v = Voicer(10, i, [\env, Env.adsr(0.01, 0.2, 0.75, 0.1), \rq, `0.2]);

k = VoicerMIDISocket(0, v);
k.addControl(1, \ffreq, 1000, \freq); Â  // filt. cutoff by mw

// Then add a control to the socket using \pb it as the controller number. This is mapped to the pitch bend input and the number given as the "spec" to the addControl method is interpreted as the number of semitones up or down to bend.

// the first \pb is the controller ID; the second \pb is the synthdef argument name
// the synthdef argument can be called anything but you have to use \pb to identify the midi controller

k.addControl(\pb, \pb, 1, 3);	// 3-semitone bend

v.gui;	// the controllers show up in the window, w/ visual feedback when you move the wheels

/*
You might also have some fun with the miditest method for SynthDef and Instr, which creates global controls for synthdef arguments and then displays them all in a GUI. This is really useful for tuning parameters while playing notes on the keyboard.

hjh
*/
